////////////////////////////////////////
//                                    //
// COMEDERO AUTOMATICO BY LEANDROUNO  //
//      01/11/2021 Version 2.0        //  
//      15/02/2022 Version 2.1        //  
//                                    //
////////////////////////////////////////

#include <ESP8266WiFi.h>
#include <NTPClient.h>
#include <WiFiUdp.h>


#define PULSADOR D4
#define LED D2
#define RELE D6

const char *ssid     = "";
const char *password = "";

String estadoAlimentacion = "";
int modoAutomatico = true;
int modoAlimentar = true;
unsigned long tiempoAhora = 0;


WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org");
WiFiServer server(80);

 String dias[7]={"Domingo", "Lunes", "Martes", "Miercoles", "Jueves", "Viernes", "Sabado"};
 String meses[12]={"Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"};


void setup() {


  Serial.begin(115200);
  Serial.println("Iniciando TerryDero BY Leandrouno..."); 

  pinMode(RELE, OUTPUT);
  pinMode(LED, OUTPUT);
  pinMode(PULSADOR,INPUT_PULLUP);
  digitalWrite(RELE, LOW);
 
  Serial.print("Conectando a ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  timeClient.begin();
  timeClient.setTimeOffset(-10800);
  timeClient.update();

  Serial.println (" ");
  Serial.print ("Iniciado  : ");
  Serial.println(retornoFecha(8));

  server.begin();

  Serial.print("http://");
  Serial.println(WiFi.localIP());

  attachInterrupt(digitalPinToInterrupt(D4), presionoPulsador, FALLING);
  
}

void loop() {

  if (WiFi.status() == WL_CONNECTED) { digitalWrite(LED, HIGH); } else {digitalWrite(LED, LOW);}
      timeClient.update();     
      verificarHora();

      if(Serial.available() > 0){
        char dato = Serial.read();
        if (dato == 'A'){alimentar();}
        if (dato == 'F'){modoAlimentar = false; Serial.println(" -- Alimentador Apagado -- ");}
        if (dato == 'N'){modoAlimentar = true; Serial.println(" -- Alimentador Encendido -- ");}
      }

 WiFiClient client = server.available();

  if (!client)  {
    return;
  }

  while(!client.available()) {
    delay(1);
  }

  String request = client.readStringUntil('\r');

  Serial.println(request);

  client.flush();

   if(request.indexOf("/ALIMENTAR=ON") != -1) {

    client.println("<script type='text/javascript'>window.location.href = '../'</script>");
    alimentar();
    return;

  }

   if(request.indexOf("/AUTOMATICO=OFF") != -1) {

    modoAutomatico = false;
    client.println("<script type='text/javascript'>window.location.href = '../'</script>");

  }

   if(request.indexOf("/AUTOMATICO=ON") != -1) {

    modoAutomatico = true;
    client.println("<script type='text/javascript'>window.location.href = '../'</script>");

  }

   if(request.indexOf("/MODOALIMENTAR=OFF") != -1) {

    modoAlimentar = false;
    client.println("<script type='text/javascript'>window.location.href = '../'</script>");

  }

   if(request.indexOf("/MODOALIMENTAR=ON") != -1) {

    modoAlimentar = true;
    client.println("<script type='text/javascript'>window.location.href = '../'</script>");

  }
 

  client.println("HTTP/1.1 200 OK");

  client.println("Content-Type: text/html");

  client.println("");

  client.println("<!DOCTYPE HTML>");

  client.println("<html>");
  client.println("<title>TerryDero</title>");
  client.println("<link href='https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css' rel='stylesheet' integrity='sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC' crossorigin='anonymous'>");
  client.println("<script src='https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js' integrity='sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM' crossorigin='anonymous'></script>");

  client.println("<div class='d-flex justify-content-center'><div class='container'><h1 class='display-4'>Disparador</h1></div>");
  client.println("<div class='d-flex justify-content-center'><h5><span class='badge bg-secondary'>Automatico : ");
  client.println(modoAutomatico);
  client.println("</span></h5><h5><span class='badge bg-primary'>Estado Alimentador : ");
  client.println(modoAlimentar);
  client.println("</span></h5></div></div><div class='container text-center'>");
  client.println(estadoAlimentacion);
  client.println("</div>");
  client.println("<br><br>")  ;

  client.println("<div class='justify-content-center'><div class='col text-center'>");
  client.println("<a href=\"/ALIMENTAR=ON\"\"><button class='btn btn-info'>Alimentar </button></a>");
  client.println("<a href=\"/AUTOMATICO=ON\"\"><button class='btn btn-primary'>Automatico ON</button></a>");
  client.println("<a href=\"/AUTOMATICO=OFF\"\"><button class='btn btn-warning'>Automatico OFF</button></a>");
  client.println("<a href=\"/MODOALIMENTAR=ON\"\"><button class='btn btn-success'>Encendido</button></a>");
  client.println("<a href=\"/MODOALIMENTAR=OFF\"\"><button class='btn btn-danger'>Apagado</button></a>");
  client.println("</div></div>");

  client.println("</html>");

  delay(1);

  Serial.println("Cliente desconectado");

  Serial.println("");

}


void alimentar () {
    
    if (modoAlimentar == true){
    
    Serial.println("--- Alimentando ---");

    for (int i =0 ; i <5 ;i++){
      
       Serial.println("disparo");
       
       digitalWrite(RELE, HIGH);
       delay(200);
       digitalWrite(RELE, LOW);
       delay(300);

      }

    Serial.println("--- FIN ---");

    Serial.println(retornoFecha(8));
    estadoAlimentacion +="<p class='h6 text-success'>";
    estadoAlimentacion += retornoFecha(8);
    estadoAlimentacion +="</p><br>";

    } else {

        Serial.println("--- Alimentandor APAGADO ---");
        Serial.println(retornoFecha(8));
        estadoAlimentacion +="<p class='h6 text-danger'> Alimentador -APAGADO-";
        estadoAlimentacion += retornoFecha(8);
        estadoAlimentacion +="</p><br>";

    }

}

void verificarHora(){
    
    String horaActual = retornoFecha(1);
    String minutosActual = retornoFecha(2);   
    String segundosActual = retornoFecha(3);
    
    if (
        (horaActual.toInt() == 12 && minutosActual.toInt() == 55 && segundosActual.toInt() == 0) ||
        (horaActual.toInt() == 20 && minutosActual.toInt() == 30 && segundosActual.toInt() == 0)){

      if(modoAutomatico == true){ 
        alimentar(); 
        Serial.println(" -- Modo Automatico -- ");
        return;
        } else {

        Serial.println(" ");
        Serial.println(" -- Paso por hora Desactivado -- ");
        Serial.println(" ");
        estadoAlimentacion +="<p class='h6 text-danger'>Desactivado - >";
        estadoAlimentacion += retornoFecha(8);
        estadoAlimentacion +="</p><br>";

        }

    delay(1000);
    Serial.println(".");

    }

}

  void presionoPulsador(){
   
    Serial.print("Se presiono pulsador : ");
    Serial.println(retornoFecha(8));
    tiempoAhora = millis();
    while(millis() < tiempoAhora+200){}
    alimentar();
    return;
  }

  String retornoFecha( int i){

  unsigned long epochTime = timeClient.getEpochTime();
  int horaActual = timeClient.getHours();
  int minutosActual = timeClient.getMinutes();   
  int segundosActual = timeClient.getSeconds();
  String diaSemana = dias[timeClient.getDay()];
  struct tm *ptm = gmtime ((time_t *)&epochTime);  
  int diaMes = ptm->tm_mday; 
  int mesCorriente = ptm->tm_mon+1;
  String mesCorrienteNombre = meses[mesCorriente-1];
  
  String fecha = String(diaSemana) + " " + String(diaMes) + " de " + String(mesCorrienteNombre) + " a las " + String(horaActual) + ":" + String(minutosActual) + ":" + String(segundosActual);

  String array[10];
  array[0] = epochTime;
  array[1] = horaActual;
  array[2] = minutosActual;
  array[3] = segundosActual;
  array[4] = diaSemana;
  array[5] = diaMes;
  array[6] = mesCorriente;
  array[7] = mesCorrienteNombre;
  array[8] = fecha;

  return array[i];
  
  }

